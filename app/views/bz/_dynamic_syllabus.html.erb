<div class="bz-dynamic-syllabus">
<%
  @bypass_lock = @editable || @current_user.enrollments.where(:course_id => @course.id).first.ta?
%>
<% if @editable %>
  <a href="/courses/<%= @course.id %>/dynamic_syllabus/edit">Edit</a>
<% end %>

  <h1><%= @course.intro_title %></h1>
  <div class="bz-course-intro-text"><%= @course.intro_text ? @course.intro_text.html_safe : '' %></div>

  <%
    # want to display only announcements here
    items = categorize_stream_items(@stream_items)["Announcement"]
    if items.present?
  %>
    <table id="bz-announcements-list" class="no-zebra">
      <%= render :partial => 'shared/recent_activity_item', :collection => items %>
    </table>
  <%
    end
  %>



  <!--
    We need parts, which organized modules, have title, description, and task boxes.
      - let's put the part ID on the module table.

    Modules need images and intro text added.
  -->

  <% graded_modules = {} %>

  <div class="bz-course-part-task-box" id="bz-task-part-box">
    <%
      objs = []
      quizzes_shown = {}
      assignments_shown = {}
      @course.context_modules.active.each do |mod|
        mod.content_tags.active.each do |tag|
          text = nil
          icon = ''
          obj = nil
          if tag.content_type =='Assignment'
            text = 'Submit'
            icon = 'assignment'
            next if assignments_shown[tag.content_id]
            assignments_shown[tag.content_id] = true
            obj = Assignment.find(tag.content_id)
            next if obj.nil?

            if obj.name.starts_with?('Begin') || obj.name.starts_with?('Complete')
              text = ''
            end

            submission = obj.find_or_create_submission(@current_user)
            # user already submitted, it isn't a todo anymore
            if submission
              next if submission.workflow_state == 'submitted' || submission.workflow_state == 'graded'
            end
          elsif tag.content_type == 'Quizzes::Quiz'
            text = 'Take'
            icon = 'quiz'
            next if quizzes_shown[tag.content_id]
            quizzes_shown[tag.content_id] = true
            obj = Quizzes::Quiz.find(tag.content_id)
            next if obj.nil?

            # already submitted, we can move on
            next if obj.quiz_submissions.not_settings_only.where("user_id = ?", @current_user.id).exists?
          end

          link = "/courses/#{@course.id}/modules/items/#{tag.id}"

          next if obj.nil?

          overridden = obj.overridden_for(@current_user)

          unless text.nil? || overridden.due_at.nil?
            # skip anything that is significantly past due
            # because it ought to be already done
            next if overridden.due_at < (DateTime.now - 2.days)

            # also skip anything more than a month out, no need to display that yet
            next if overridden.due_at > (DateTime.now + 30.days)

            magic = {}
            magic[:obj] = obj
            magic[:text] = "#{text} #{tag.title}"
            magic[:link] = link
            magic[:due_at] = due_at(obj, @current_user)
            magic[:sort_order] = overridden.due_at
            magic[:icon] = icon

            objs << magic
          end
        end
      end

      # let's also fetch assignments not in modules,
      # with special treatment for course participation
      @course.assignments.active.each do |obj|
        text = nil
        if obj.title.starts_with? "Course Participation - "
          disp_name = obj.title["Course Participation - ".length .. -1]

          graded_modules[disp_name] = true unless obj.grading_type == 'not_graded'

          submission = obj.find_or_create_submission(@current_user)
          if submission
            existing_grade = submission.grade.nil? ? 0 : submission.grade.to_f
            possible = obj.points_possible.nil? ? 0 : obj.points_possible.to_f

            # They have already completed the vast majority of the module per
            # course participation grade; enough to say they are likely done here
            # and it no longer needs to be a todo
            if possible > 0
              next if (existing_grade / possible) >= 0.95
            end
          end

          text = 'Complete Module'
          icon = 'document'
          # need the page for the direct link
          mod = @course.context_modules.active.where(:name => disp_name).first
          next if mod.nil?
          page = WikiPage.find(mod.content_tags.active.first.content_id)
          next if page.nil?
          # need the module for the unlock date
          mod = @course.context_modules.active.where(:name => disp_name).first
          link = "/courses/#{@course.id}/pages/#{page.url}"
        else
          text = 'Submit'
          icon = 'assignment'
          disp_name = obj.title
          link = "/courses/#{@course.id}/assignments/#{obj.id}"

          if obj.name.starts_with?('Begin') || obj.name.starts_with?('Complete')
            text = ''
          end

          submission = obj.find_or_create_submission(@current_user)
          # user already submitted, it isn't a todo anymore
          if submission
            next if submission.workflow_state == 'submitted' || submission.workflow_state == 'graded'
          end
        end

        next if assignments_shown[obj.id]
        assignments_shown[obj.id] = true

        overridden = obj.overridden_for(@current_user)

        unless text.nil? || overridden.due_at.nil?
          # skip anything that is significantly past due
          # because it ought to be already done
          next if overridden.due_at < (DateTime.now - 2.days)

          # also skip anything more than a month out, no need to display that yet
          next if overridden.due_at > (DateTime.now + 30.days)

          # skip locked modules
          next if !mod.nil? && !mod.unlock_at.nil? && mod.unlock_at > DateTime.now

          magic = {}
          magic[:obj] = obj
          magic[:text] = "#{text} #{disp_name}"
          magic[:link] = link
          magic[:due_at] = due_at(obj, @current_user)
          # onboarding should always be first, so we pretend it is always due right now to make it
          # at the top of the todo list
          magic[:sort_order] = (disp_name == "Onboard to Braven") ? DateTime.now : overridden.due_at
          magic[:icon] = icon

          objs << magic
        end

      end

      # make sure onboard to braven is always first
      objs = objs.sort { |x, y| x[:sort_order] <=> y[:sort_order] }

      if objs.any?
      objs.each do |obj|
        %>
          <li class="todo">
            <a class="item" href="<%= obj[:link] %>">
              <i class="icon-<%= obj[:icon] %>"></i>
                <div class="todo-details">
                <p><%= obj[:text] %></p>
                <p><%= obj[:due_at] %></p>
              </div>
            </a>
          </li>
        <%
      end
      else
      %>
        <li>Nothing for now</li>
      <%
      end
    %>
  </div>

  <% first_module = true %>

  <% CoursePart.where(:course_id => @course.id).order(:position, :id).each do |part|
     part_count = 0
     part_modules = @course.context_modules.active.where(:part_id => part.id)
     progressions = {}
     all_complete = true
     part_modules.each do |mod|
       progress = bz_get_progression_proxy(progressions[mod.id], first_module, mod)
       first_module = false

       progressions[mod.id] = progress
       all_complete = false if progress.nil? || progress.workflow_state != 'completed'
     end
  %>
  <div class="bz-course-part <%= all_complete ? 'bz-part-complete bz-part-collapsed' : '' %>">
    <h2><%= part.title %></h2>

    <% if all_complete %>
      <button class="bz-expand-collapse-button" type="button" onclick="
        $(this.parentNode).toggleClass('bz-part-collapsed');
        if($(this.parentNode).hasClass('bz-part-collapsed'))
          this.innerHTML = 'Expand';
        else
          this.innerHTML = 'Collapse';
      ">Expand</button>
    <% end %>

    <p><%= part.intro ? part.intro.html_safe : '' %></p>

    <% if false %>
    <!-- commented as it isn't used in this version -->
    <div class="bz-course-part-task-box">
      <h3><%= part.task_box_title %></h3>
      <div><%= part.task_box_intro ? part.task_box_intro.html_safe : "" %></div>
    </div>
    <% end %>

    <% part_modules.each do |mod| %>
    <% part_count += 1 %>
    <%
      progress = progressions[mod.id]
    %>
    <div class="bz-course-part-module-box <%= (progress.nil? || @bypass_lock) ? '' : progress.workflow_state %> " <%
      if progress && progress.workflow_state == 'completed' %> onclick="window.location.href='/courses/<%= @course.id %>/modules/items/<%= mod.content_tags.first.id %>';" style="cursor: pointer;"<%end%>>
      <div class="bz-module-image"><img src="<%= mod.image_url %>" alt="" /></div>
      <h3><!--<%= part_count %> --><%= mod.name %></h3>
      <div><%= mod.intro_text ? mod.intro_text.html_safe : '' %></div>
      <% if progress && progress.workflow_state == 'completed' %>
        <a href="/courses/<%= @course.id %>/modules/items/<%= mod.content_tags.first.id %>" class="bz-button-pick-up">Completed</a>
      <% elsif progress && progress.workflow_state == 'locked' && !@bypass_lock %>
        <!-- locked for non-teachers, no button needed -->
      <% else %>
        <%
          ump = UserModulePosition.where(:user_id => @current_user.id, :module_id => mod.id, :course_id => @course.id)
          if ump.empty?
        %>
          <% unless mod.content_tags.empty? %>
            <a class="bz-button-pick-up" href="/courses/<%= @course.id %>/modules/items/<%= mod.content_tags.active.first.id %>">Get Started</a>
          <% end %>
        <% else %>
          <a class="bz-button-pick-up" href="/courses/<%= @course.id %>/modules/items/<%= ump.first.module_item_id %>">Pick up where you left off</a>

        <% end %>
      <% end %>
      <% if graded_modules[mod.name] && (@bypass_lock || (progress && progress.workflow_state == 'completed')) %>
        <div class="bz-explain-grade-link"><a href="/bz/grade_details?module_item_id=<%= mod.content_tags.first.id %>">Explain Grade</a></div>
      <% end %>
    </div>
    <% end %>
  </div>
  <% end %>
</div>

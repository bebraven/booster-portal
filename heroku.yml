# For database provisioning, see: https://devcenter.heroku.com/articles/ruby-database-provisioning
# As a PoC, clone the staging RDS database and try pointing this app at it using: heroku config:set DATABASE_URL=<scheme>://<username>:<password>@<host>
# Reference the DATABASE_URL in config/database.yml? Right now, that file doesn't exist. Generally, we need to add the configs into heroku.
# If i check it into src control... will that impact the currect env? I don't think so, but need to check how capistrano would deal if those files were checked in.

# Runtime scripts, addons, ENV vars, et. Not available at build time.
setup:
  config:
    RAILS_ENV: production
    RACK_ENV: production

# Note that config values in here are only available at Build time, not runtime. Use setup: section for runtime vars.
build:
  docker:
# TODO: just verifying that a small docker manifest will come up by using an alternate Dockerfile.
# If this works, move to using multi-stage builds to reduce the manifest size.
#    web: Dockerfile
    web: Dockerfile.production
  config:
    RAILS_ENV: production
    RACK_ENV: production
    JS_BUILD_NO_UGLIFY: 1

run:
  web: bundle exec puma -C config/puma.rb
  # Note: currently, the worker dyno must be at least standard-2x, which has 1GB of memory.
  # Just loading the Rails app is like 900MB (which we need to optimize/reduce) so after the first
  # deploy make sure and run: heroku ps:resize worker=standard-2x (or larger)
  worker:
    command:
      # Use: DELAYED_JOB_WORKERS and DELAYED_JOB_WORKER_MAX_MEMORY
      # environment variables to control the delayed_job worker's behavior. See config/delayed_job.rb
      #
      # Note: the command you run to start the dyno must continue running. It can't exit. So we
      # can't daemonize the delayed_jobs worker like we do on AWS by calling start instead of run. 
      # But run does it in the foreground and logs to stdout, so this works nicely with Heroku worker dynos.
      # See this about how Heroku handles commands that exit:
      # https://devcenter.heroku.com/articles/dynos#restarting
      # See this class for details of start vs run:
      # vendor/bundle/ruby/2.1.0/gems/inst-jobs-0.11.2/lib/delayed/cli.rb
      - bundle exec script/canvas_init run
    image: web

release:
  image: worker
  command:
    - bundle exec rake db:migrate
